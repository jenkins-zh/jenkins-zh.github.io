<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on Jenkins 中文社区</title>
    <link>https://jenkins-zh.cn/tags/api/</link>
    <description>Recent content in api on Jenkins 中文社区</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-zh.cn/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GSoC: GitHub Checks API 项目第三阶段总结</title>
      <link>https://jenkins-zh.cn/wechat/articles/2020/09/2020-09-25-github-checks-api-plugin-project-coding-phase-3/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-zh.cn/wechat/articles/2020/09/2020-09-25-github-checks-api-plugin-project-coding-phase-3/</guid>
      <description>这篇文章将介绍 GitHub Checks API 项目在谷歌编程之夏第三阶段的相关工作。
在这个夏天的尾声，GitHub Checks API 项目迎来了它在 GSoC 的最后一段旅程。在这篇文章当中，我将向你们展示我们在这最后一个阶段中的相关工作：
 流水线支持 Rerun 请求支持 Git SCM 支持 文档的完善  以上的特性已经合并在了最新发布的 Checks API 插件 与 GitHub Checks 插件 的 1.0.0 版本中。
流水线支持 对流水线的支持让用户无需依赖任何 Checks API 的实现就可以直接在他们编写的流水线当中轻松发布 checks。
上图中的 check 可以通过如下脚本实现：
publishChecks name: &amp;#39;pipeline check&amp;#39;, title: &amp;#39;pipeline &amp;#39;, summary: &amp;#39;# A pipeline check example&amp;#39;, text: &amp;#34;## This check is published through the pipeline script&amp;#34;, detailsURL: &amp;#39;https://ci.jenkins.io&amp;#39; 如果你想要发布 checks 到 GitHub，请安装 GitHub 的实现 并查阅 GitHub API 文档 了解各个参数的相关用途。其中，detailsURL 会拥有一个链接到此次 Jenkins 构建页面的默认值。</description>
    </item>
    
    <item>
      <title>GSoC: GitHub Checks API 项目第一阶段总结</title>
      <link>https://jenkins-zh.cn/wechat/articles/2020/08/2020-08-07-github-checks-api-plugin-project-coding-phase-1/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-zh.cn/wechat/articles/2020/08/2020-08-07-github-checks-api-plugin-project-coding-phase-1/</guid>
      <description>这篇博客将介绍 GSoC 项目 GitHub Checks API Plugin 在一阶段的相关进展。
简单来说，GitHub Checks API 就是一套可高度定制化接受 CI 报告的接口。 CI 工具可以通过该接口反馈信息给特定的 Pull Request，随后，用户便可以直接在 GitHub 的 UI 界面上直观的浏览 CI 报告。
更激动人心的是，它可以针对指定的代码行进行注释，这类似于开发者平时在代码审查时留下的评论。
同时，在 Jenkins 这边，Warnings Next Generation Plugin 能通过源代码视图实现类似的功能。
因此，通过使用 GitHub Checks API 将这些信息直接反馈给 GitHub 能使 Jenkins 对 GitHub 用户更加友好。
阶段一实现的相关特性 在过去的一个月里，我们团队的工作主要集中在 General Checks API 和 GitHub Checks API 的实现上。
General Checks API 尽管 General Checks API 是基于 GitHub Checks API 的语义实现的，我们仍然希望能提供这样的泛化接口为其他平台的相关概念做好准备，例如：GitLab 上的 Commit Status API。 在今后，我们欢迎所有人贡献针对这些平台的相关实现。</description>
    </item>
    
  </channel>
</rss>